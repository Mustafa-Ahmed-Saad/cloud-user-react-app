{"version":3,"sources":["components/viewUser.js","api/users.js","components/usersForm.js","App.js","reportWebVitals.js","index.js"],"names":["ViewUser","props","user","name","email","address","city","GetUsers","a","axios","get","response","console","log","DeleteUser","id","delete","updateUser","values","put","addUser","post","UsersForm","schema","Yup","shape","required","username","enableReinitialize","initialValues","onSubmit","validationSchema","render","type","App","state","users","componentDidMount","then","setState","data","catch","error","alert","showDetaile","index","indexOf","splice","className","this","map","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ba70e78.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ViewUser(props) {\r\n   return (\r\n      <div>\r\n         <div>name: {props.user.name}</div>\r\n         <div>email: {props.user.email}</div>\r\n         <div>city: {props.user.address.city}</div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default ViewUser;\r\n","// import React from 'react';\r\nimport axios from 'axios';\r\n\r\nasync function GetUsers() {\r\n   const response = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n   console.log(response);\r\n   return response;\r\n}\r\n// or you can use then\r\n// function GetUsers() {\r\n//    let response = axios.get('https://jsonplaceholder.typicode.com/users').then((response) => {\r\n//       return response;\r\n//    });\r\n//    return response;\r\n// }\r\n\r\nasync function DeleteUser(id) {\r\n   const response = await axios.delete('https://jsonplaceholder.typicode.com/users/' + id);\r\n   console.log(response);\r\n   return response;\r\n}\r\n// or you can use then\r\n// function DeleteUser(id) {\r\n//    let response = axios.get('https://jsonplaceholder.typicode.com/users/' + id).then((response) => {\r\n//       return response;\r\n//    });\r\n//    return response;\r\n// }\r\n\r\nasync function updateUser(id, values) {\r\n   const response = await axios.put('https://jsonplaceholder.typicode.com/users/' + id, values);\r\n   console.log(response);\r\n   return response;\r\n}\r\n\r\nasync function addUser(values) {\r\n   const response = await axios.post('https://jsonplaceholder.typicode.com/users/', values);\r\n   console.log(response);\r\n   return response;\r\n}\r\n\r\nexport { GetUsers, DeleteUser, updateUser, addUser };\r\n","import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nexport default function UsersForm(props) {\r\n   const schema = Yup.object().shape({\r\n      name: Yup.string().required(),\r\n      email: Yup.string().email().required(),\r\n      username: Yup.string().required(),\r\n   });\r\n\r\n   return (\r\n      <Formik\r\n         enableReinitialize={true}\r\n         initialValues={props.values}\r\n         onSubmit={props.onSubmit}\r\n         validationSchema={schema}\r\n         render={() => {\r\n            return (\r\n               <Form>\r\n                  <label>Name</label>\r\n                  <Field name=\"name\" />\r\n                  <ErrorMessage name=\"name\" />\r\n\r\n                  <br />\r\n\r\n                  <label>Email</label>\r\n                  <Field name=\"email\" />\r\n                  <ErrorMessage name=\"email\" />\r\n\r\n                  <br />\r\n\r\n                  <label>user name</label>\r\n                  <Field name=\"username\" />\r\n                  <ErrorMessage name=\"username\" />\r\n\r\n                  <br />\r\n\r\n                  <button type=\"submit\">Send</button>\r\n               </Form>\r\n            );\r\n         }}\r\n      />\r\n   );\r\n}\r\n","import React, { Component } from 'react';\r\nimport ViewUser from './components/viewUser';\r\nimport { GetUsers, DeleteUser, updateUser, addUser } from './api/users';\r\nimport UsersForm from './components/usersForm';\r\n// import './App.css';\r\n\r\nclass App extends Component {\r\n   state = {\r\n      users: [],\r\n      user: {},\r\n   };\r\n\r\n   componentDidMount = () => {\r\n      // console.log(GetUsers());\r\n      GetUsers()\r\n         .then((response) => {\r\n            // here we use component GetUsers like a function GetUsers() and it return the responsey\r\n            this.setState({\r\n               users: response.data,\r\n            });\r\n            // console.log(this.state.users);\r\n         })\r\n         .catch((error) => {\r\n            // console.error(error);\r\n            alert('api get requerst error');\r\n         });\r\n   };\r\n\r\n   showDetaile = (user) => {\r\n      this.setState({\r\n         user: user,\r\n      });\r\n   };\r\n\r\n   DeleteUser = (user) => {\r\n      // delete user from server\r\n      DeleteUser(user.id)\r\n         .then(() => {\r\n            // delete user from dom by delet it from state (after deletit from server)\r\n            let users = this.state.users;\r\n            const index = users.indexOf(user);\r\n            users.splice(index, 1);\r\n            this.setState({\r\n               users: users,\r\n            });\r\n            // or we can write users only inested of users: users\r\n            // this.setState({\r\n            //    users,\r\n            // });\r\n         })\r\n         .catch((error) => {\r\n            // console.error(error);\r\n            alert('api delete requerst error');\r\n         });\r\n   };\r\n\r\n   updateUser = (values) => {\r\n      // values = object in initialValues\r\n      // onSubmit is pass parameter by default that is values that is the object that content on all value of user and this object in initialValues\r\n      const id = this.state.user.id;\r\n      updateUser(id, values)\r\n         .then(() => {\r\n            // this values is in initialValues in formik and values is props.values that is this.state.user\r\n            alert('success');\r\n         })\r\n         .catch((error) => {\r\n            alert('update user request error');\r\n         });\r\n   };\r\n\r\n   addUser = (values) => {\r\n      addUser(values)\r\n         .then(() => {\r\n            alert('this user added successfuly');\r\n         })\r\n         .catch((error) => {\r\n            alert('add user request error');\r\n         });\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"App\">\r\n            <div className=\"container\">\r\n               <div className=\"alluser\">\r\n                  <ul className=\"users\">\r\n                     {this.state.users.map((user) => (\r\n                        <li key={user.id}>\r\n                           <div>{user.name}</div>\r\n                           <div className=\"button-cont\">\r\n                              <button onClick={() => this.showDetaile(user)}>view</button>\r\n                              <button onClick={() => this.DeleteUser(user)}>Delet</button>\r\n                           </div>\r\n                        </li>\r\n                     ))}\r\n                  </ul>\r\n               </div>\r\n               <div className=\"datails-edit\">\r\n                  <div className=\"details\">\r\n                     <h3>user details</h3>\r\n                     {this.state.user.id > 0 ? <ViewUser user={this.state.user} /> : 'please select a user to show its details'}\r\n                  </div>\r\n                  <div>\r\n                     <h3>edit user</h3>\r\n                     {this.state.user.id > 0 ? <UsersForm values={this.state.user} onSubmit={this.updateUser} /> : 'please select a user to edit it'}\r\n                  </div>\r\n               </div>\r\n            </div>\r\n            <div className=\"adduser\">\r\n               <h3>add user</h3>\r\n               <UsersForm\r\n                  values={{\r\n                     name: '',\r\n                     email: '',\r\n                     username: '',\r\n                  }}\r\n                  onSubmit={this.addUser}\r\n               />\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\n// function App() {\r\n//    return (\r\n//       <div className=\"App\">\r\n\r\n//          <Clock />\r\n//       </div>\r\n//    );\r\n// }\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}